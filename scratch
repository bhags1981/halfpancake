팬케이크 그래프 설계
Config : N 값

목적 : N의 모든 출발 정점에 대해서 서로소인 경로를 출력

케이스 확인
케이스별 알고리즘 실시

알고리즘 세분화.
1.정점의 외부 서브 그래프를 취득 하는 알고리즘
2.두개의 서브 그래프를 연결하는 알고리즘
3.서로 다른 퍼뮤테이션을 취득하는 메소드.
4.스텝을 확인하고 진행시키는 클래스


- Vertex Manager
- Disjoint Observer
- Unique permutation manager
- Path manager
- Create Path
-- a ~> b
-- sub graph
- Result Print
- Validator


1.n 확인
2.case 확인
3.케이스별 로직 실행

- 전체 공통 부분
-- 정점 정보, 프리픽스 리버스 정보


케이스별 로직
- 출발 정점의 외부 점을 취득하는 로직
-- 1.단순히 취득 하는 경우 2.외부점을 목적 정점의 외부정점과 반드시 하나는 만나도록 취득하는경우

- 목적 정점의 외부 점을 취득하는 로직
-- 1.단순히 취득 하는 경우 2.외부점을 출발 정점의 외부정점과 반드시 하나는 만나도록 취득하는경우

- 서브그래프를 병렬로 이동시 퍼뮤테이션을 취득하는경우


n에 대해서 전 패턴을 실험. 어떻게??

n의 모든 퍼뮤테이션을 순서대로 취득하기..
123456





1. n 을 지정
2. 모든 퍼뮤테이션을 파일에 저장.
3. 저장된 파일에서 위에서 순서대로 하나씩 취득
4. 취득된 퍼뮤테이션으로 데이터 생성 장소를 확보
5. 취득된 퍼뮤테이션을 바탕으로 알고리즘 실행


퍼뮤테이션별 알고리즘
1. 케이스 확인
2. 케이스별 알고리즘 조합
3. 알고리즘을 스텝별로 실행.

알고리즘 실행중 저장 데이터
1.취득된 정점 정보
2.사용된 유니크 퍼뮤테이션 정보





error - pattern
source [679854321] dest [123456789]
하나의 패스안에 중복 패스가 있음
findDisjointPathsSpecificSourceStart with Source ID 679854321
[1483379950136] [HPDisjointPathService] initialized N2N with source = 679854321 and 123456789
[1483379950164] [HPDisjointPathService]  Start find disjoint paths.
[1483379950164] Start construct disjoint paths between {123456789} and {679854321} by Case 1-3 service.
[1483379950165] [Step 1] Is exist position L ? {-1} (-1 is false)

Node id 987654312 is already used.
[1483379950136] [HPDisjointPathService] initialized N2N with source = 679854321 and 123456789
[1483379950164] [HPDisjointPathService]  Start find disjoint paths.
[1483379950164] Start construct disjoint paths between {123456789} and {679854321} by Case 1-3 service.
[1483379950165] [Step 1] Is exist position L ? {-1} (-1 is false)
[1483379950174] [Step 2] Select path p2 result =  [123456789, 213456789, 987654312, 567894312, 987654312, 897654312, 679854312, 213458976, 123458976, 679854321]
[1483379950175] [Step 3] Select [3]th path result = [123456789, 321456789, 987654123, 678954123, 321459876, 123459876, 678954321]
[1483379950175] [Step 3] Select [4]th path result = [123456789, 432156789, 987651234, 789651234, 432156987, 123456987, 789654321]
[1483379950175] [Step 3] Select [5]th path result = [123456789, 543216789, 987612345, 897612345, 543216798, 123456798, 897654321]
[1483379950175] [Step 4] Select path result = [123456789, 987654321]
[1483379950175] [Step 5] Path[1] : [123456789, 213456789, 987654312, 567894312, 987654312, 897654312, 679854312, 213458976, 123458976, 679854321]
[1483379950175] [Step 5] Path[2] : [123456789, 321456789, 987654123, 678954123, 321459876, 123459876, 678954321, ~PNS~, 679854321]
[1483379950175] [Step 5] Path[3] : [123456789, 432156789, 987651234, 789651234, 432156987, 123456987, 789654321, ~PNS~, 679854321]
[1483379950175] [Step 5] Path[4] : [123456789, 543216789, 987612345, 897612345, 543216798, 123456798, 897654321, ~PNS~, 679854321]
[1483379950175] [Step 5] Path[5] : [123456789, 987654321, ~PNS~, 679854321]
[1483379950175] [Step 6] Finished construct disjoint paths from {123456789} to {679854321} - Terminate.

[123456789, 213456789, 987654312, 567894312, 987654312, 897654312, 679854312, 213458976, 123458976, 679854321]
[123456789, 321456789, 987654123, 678954123, 321459876, 123459876, 678954321, ~PNS~, 679854321]
[123456789, 432156789, 987651234, 789651234, 432156987, 123456987, 789654321, ~PNS~, 679854321]
[123456789, 543216789, 987612345, 897612345, 543216798, 123456798, 897654321, ~PNS~, 679854321]
[123456789, 987654321, ~PNS~, 679854321]

Process finished with exit code 0



2._n 는 왜 필요한가?
    /**
     * Select path r2: s→s(2)→s(2,n)→s(2,n,˜n),a2→ a2(n)→ a2(n,2)→ a2(n,2,n) = d where a2 = (1,2,...,n−2,n,n−1).
     */
    private fun step2(sourceNode: HalfPancakeNode,destinationNode: HalfPancakeNode){
        var n = sourceNode.getLength()
        var _n = _sourceNode.getHalfPosition()

        var tmpPathFromSourceNode = UniquePath(sourceNode).append(2).append(n)//.append(_n)



Case 2-6
Step 3) Select ( ˜ n−2) sub paths si: s → s(i) → s(i;n) →
s(i;n;i) → s(i;n;i;n) → s(i;n;i;n;i) → s(i;n;i;n;i; ˜ n−1) → s(i;n;i;n;
i; ˜ n−1;n) def = ai (2 ≤ i ≤ n−2).

Select (~n-2) 가 아닌  ~n-3
**n-2가 아닌 _n-2



Case 2-6
Step 2) If s1 = ˜ n, select path r1: s → s(n) ; a → a(n) →
a(n; ˜ n−1)(= d(n))→d where a = (1;2; : : : ; ˜ n−1;n;n−
1; : : : ; ˜ n). Otherwise, assume that sl = ˜ n ( ˜ n≤l ≤n), and
select path r1: s→s(n) →s(n;n−l+1) →s(n;n−l+1; ˜ n) →

l == n이면 패스 구축시 n-l+1이 제외 되어야 함
l == n 이면 패스 구축시 2,3,2로 전이 장소를 변경 시켜줌
                    pathFromSrc.appendNodesByIndexes(2,3,2,_n,_n-1,n,_n,n)


Case 2-6 Step 2
r1: s→s(n) →s(n;n−l+1) →s(n;n−l+1; ˜ n) →
s(n;n−l+1; ˜ n) → s(n;n−l+1; ˜ n; ˜ n−1) → s(n;n−l+1; ˜ n; ˜ n−1;n) →
s(n;n−l+1; ˜ n; ˜ n−1;n; ˜ n)→s(n;n−l+1; ˜ n; ˜ n−1;n; ˜ n;n);a→a(n)→
a(n;2) →a(n;2; ˜ n−1) →a(n;2; ˜ n−1; ˜ n−2)(= d(n))→d where
a = (1;2; : : : ; ˜ n−1; ˜ n+1; : : : ;n−1; ˜ n;n).

a->a(n)이후의 ˜n−1; ˜n−2 는 반드시 필요한가? 팬케이크로 연결하면 되지 않는가?
특수 케이스에서 중간에 경로를 두번 밟게됨. 즉 같은 서브그래프에 이미 도착해있는 상황에서 다른 서브 그래프로 넘어가려함
 123456789a -> 89a6172345  인경우에 발생했음


Checked List
Case 1-4 Step 3 - Do not do when i == k


case 1-4
Step 8) Select ( ˜ n − 2) sub paths si: s → s(i) →
s(i;n) → s(i;n; ˜ n−i+2) → s(i;n; ˜ n−i+2;n) → s(i;n; ˜ n−i+2;n;i) →
s(i;n; ˜ n−i+2;n;i;k) →s(i;n; ˜ n−i+2;n;i;k;n) def = ai (2 ≤ i ̸= l ≤ ˜ n).
Do not do when i == k



case 1-5
 Step 2) If s1 = ˜ n, select path r1: s → s(n) ; a → a(n) →
 Otherwise, assume that sl = ˜ n ( ˜ n<l ≤n),
 ~n=l<=n이지 않는가?
 ~n인 경우에는 어떻게 대응하는가?


 ~n - l +1이 아니고 l-~n +1 아닌가?



 HR Even
  sl,sh 가 하나만 존재하는 경우에는 ?




아래의 경우에는 경로를 연장해줄 필요가 있음
出発頂点が567981234
//Add b˜
tmpPath2 = UniquePath(_destinationNode)
        .prepend(_n)
        .prepend(3)
        .prepend(2)
        .prepend(3)
        .prepend(_n)
if((tmpPath2.getFirstNode() as HalfPancakeNode).getFrontString().reversed().equals(_sourceNode.getSuffixForSubGraph())){
    tmpPath2.removeFirst().prepend(2).prepend(_n)
}


아래의 경우에는 경로가 중복 발생함
[1483379950174] [Step 2] Select path p2 result =  [123456789, 213456789, 987654312, 567894312, 987654312, 897654312, 679854312, 213458976, 123458976, 679854321]
[1483379950175] [Step 3] Select [3]th path result = [123456789, 321456789, 987654123, 678954123, 321459876, 123459876, 678954321]
[1483379950175] [Step 3] Select [4]th path result = [123456789, 432156789, 987651234, 789651234, 432156987, 123456987, 789654321]
[1483379950175] [Step 3] Select [5]th path result = [123456789, 543216789, 987612345, 897612345, 543216798, 123456798, 897654321]


even HR

Let sl and sh be the smallest and the second smallest elements of (F(s)∪C(s))∩R(d),
- sl밖에 존재하지 않는 경우도 있음
src : 2138549a76
dst : 123456789a





error - pattern
source [679854321] dest [123456789]
하나의 패스안에 중복 패스가 있음
findDisjointPathsSpecificSourceStart with Source ID 679854321
[1483379950136] [HPDisjointPathService] initialized N2N with source = 679854321 and 123456789
[1483379950164] [HPDisjointPathService]  Start find disjoint paths.
[1483379950164] Start construct disjoint paths between {123456789} and {679854321} by Case 1-3 service.
[1483379950165] [Step 1] Is exist position L ? {-1} (-1 is false)

Node id 987654312 is already used.
[1483379950136] [HPDisjointPathService] initialized N2N with source = 679854321 and 123456789
[1483379950164] [HPDisjointPathService]  Start find disjoint paths.
[1483379950164] Start construct disjoint paths between {123456789} and {679854321} by Case 1-3 service.
[1483379950165] [Step 1] Is exist position L ? {-1} (-1 is false)
[1483379950174] [Step 2] Select path p2 result =  [123456789, 213456789, 987654312, 567894312, 987654312, 897654312, 679854312, 213458976, 123458976, 679854321]
[1483379950175] [Step 3] Select [3]th path result = [123456789, 321456789, 987654123, 678954123, 321459876, 123459876, 678954321]
[1483379950175] [Step 3] Select [4]th path result = [123456789, 432156789, 987651234, 789651234, 432156987, 123456987, 789654321]
[1483379950175] [Step 3] Select [5]th path result = [123456789, 543216789, 987612345, 897612345, 543216798, 123456798, 897654321]
[1483379950175] [Step 4] Select path result = [123456789, 987654321]
[1483379950175] [Step 5] Path[1] : [123456789, 213456789, 987654312, 567894312, 987654312, 897654312, 679854312, 213458976, 123458976, 679854321]
[1483379950175] [Step 5] Path[2] : [123456789, 321456789, 987654123, 678954123, 321459876, 123459876, 678954321, ~PNS~, 679854321]
[1483379950175] [Step 5] Path[3] : [123456789, 432156789, 987651234, 789651234, 432156987, 123456987, 789654321, ~PNS~, 679854321]
[1483379950175] [Step 5] Path[4] : [123456789, 543216789, 987612345, 897612345, 543216798, 123456798, 897654321, ~PNS~, 679854321]
[1483379950175] [Step 5] Path[5] : [123456789, 987654321, ~PNS~, 679854321]
[1483379950175] [Step 6] Finished construct disjoint paths from {123456789} to {679854321} - Terminate.

[123456789, 213456789, 987654312, 567894312, 987654312, 897654312, 679854312, 213458976, 123458976, 679854321]
[123456789, 321456789, 987654123, 678954123, 321459876, 123459876, 678954321, ~PNS~, 679854321]
[123456789, 432156789, 987651234, 789651234, 432156987, 123456987, 789654321, ~PNS~, 679854321]
[123456789, 543216789, 987612345, 897612345, 543216798, 123456798, 897654321, ~PNS~, 679854321]
[123456789, 987654321, ~PNS~, 679854321]

Process finished with exit code 0



2._n 는 왜 필요한가?
    /**
     * Select path r2: s→s(2)→s(2,n)→s(2,n,˜n),a2→ a2(n)→ a2(n,2)→ a2(n,2,n) = d where a2 = (1,2,...,n−2,n,n−1).
     */
    private fun step2(sourceNode: HalfPancakeNode,destinationNode: HalfPancakeNode){
        var n = sourceNode.getLength()
        var _n = _sourceNode.getHalfPosition()

        var tmpPathFromSourceNode = UniquePath(sourceNode).append(2).append(n)//.append(_n)



例外パターン2
偶数の場合で
123456789a and 78a9234561のとき
//Add b~n-1
tmpPath2 =
UniquePath(_destinationNode)
.prependNodesByIndexes(_n-1,_n,_n-1,2,n)
で2をした場合出発頂点のサブグラフに行ってしまう場合があるので2か3を確認して選択
もっともいい方法はn2sが使えるようにすること

例外パターン
偶数の場合で
[1485933972009] [HPDisjointPathService] initialized N2N with source = 123456789a and 5789a43261
[1485933972021] CURRENT CASE INFO EVEN_6 / Reversed pattern true
[1485933972022] [HPDisjointPathService]  Start find disjoint paths.
[1485933972022] [HPDCase2_6_Service] started Case 2_6
[1485933972027] PATH FROM SRC [5789a43261, 16234a9875, 61234a9875, a432169875, 1234a69875, 57896a4321]
[1485933972027] PATH FROM DST [a698754321, 6a98754321, 789a654321, a987654321, 123456789a]
の場合目的頂点をnひっくり返した場合に出発頂点からの同じサブグラフに入ってしまう場合がありうる。


例外パターン 重複が起こりうる 5a43216789
[1485935752221] CURRENT CASE INFO EVEN_6 / Reversed pattern false
[1485935752223] [HPDisjointPathService]  Start find disjoint paths.
[1485935752223] [HPDCase2_6_Service] started Case 2_6
[1485935752227] PATH FROM SRC [123456789a, a987654321, 56789a4321, 98765a4321, 1234a56789, 5a43216789, 98761234a5]
[1485935752227] Node id 5a43216789 is already used.
[1485935752229] [constructPNS] Path[1] : [123456789a, 213456789a, a987654312, 9a87654312, 21345678a9, 12345678a9, 54321678a9, 9a87612345, ~PNS~, 98761a2345]
[1485935752229] [constructPNS] Path[2] : [123456789a, 321456789a, a987654123, 89a7654123, 3214567a98, 1234567a98, 5432167a98, 89a7612345, ~PNS~, 98761a2345]
[1485935752229] [constructPNS] Path[3] : [123456789a, 432156789a, a987651234, 789a651234, 432156a987, 123456a987, 543216a987, 789a612345, ~PNS~, 98761a2345]
[1485935752229] [constructPNS] Path[4] : [123456789a, 654321789a, a987123456, 1789a23456, 65432a9871, 23456a9871, 54326a9871, 1789a62345, ~PNS~, 98761a2345]
[1485935752229] [constructPNS] Path[5] : [123456789a, 543216789a, a987612345, ~PNS~, 98761a2345]
[1485935752229] [constructPNS] Path[6] : [123456789a, a987654321, 56789a4321, 98765a4321, 1234a56789, 5a43216789, 98761234a5, 5a43216789, a543216789, 2345a16789, 5432a16789, 98761a2345]


例外パターン：途中同じサブグラフに属する場合がある
エラーを再現したい場合は
HDPCase2_6_Serviceの
ifの中の            pathFromSrc.appendNodesByIndexes(_n,n)を削除し
ifの上の            pathFromSrc.appendNodesByIndexes(_n,n)を復活させる

findDisjointPathsSpecificSourceStart with Source ID 123456789a
[123456789a, 213456789a, a987654312, 9a87654312, 21345678a9, 12345678a9, 54321678a9, 9a87612345]
[123456789a, 321456789a, a987654123, 89a7654123, 3214567a98, 1234567a98, 5432167a98, 89a7612345]
[123456789a, 432156789a, a987651234, 789a651234, 432156a987, 123456a987, 543216a987, 789a612345]
[123456789a, 654321789a, a987123456, 1789a23456, 65432a9871, 23456a9871, 54326a9871, 1789a62345]
[123456789a, 543216789a, a987612345]
[123456789a, a987654321, 56789a4321, 98765a4321, 1234a56789, 5a43216789, 98761234a5, 5a43216789, a543216789, 2345a16789, 5432a16789, 98761a2345]
[1485937552483] [HPDisjointPathService] initialized N2N with source = 123456789a and 98761a2345
[1485937552495] CURRENT CASE INFO EVEN_6 / Reversed pattern false
[1485937552501] [HPDisjointPathService]  Start find disjoint paths.
[1485937552501] [HPDCase2_6_Service] started Case 2_6
[1485937552509] PATH FROM SRC [123456789a, a987654321, 56789a4321, 98765a4321, 1234a56789, 5a43216789, 98761234a5]
[1485937566906] Node id 5a43216789 is already used.
[1485937597505] [constructPNS] Path[1] : [123456789a, 213456789a, a987654312, 9a87654312, 21345678a9, 12345678a9, 54321678a9, 9a87612345, ~PNS~, 98761a2345]
[1485937597505] [constructPNS] Path[2] : [123456789a, 321456789a, a987654123, 89a7654123, 3214567a98, 1234567a98, 5432167a98, 89a7612345, ~PNS~, 98761a2345]
[1485937597505] [constructPNS] Path[3] : [123456789a, 432156789a, a987651234, 789a651234, 432156a987, 123456a987, 543216a987, 789a612345, ~PNS~, 98761a2345]
[1485937597505] [constructPNS] Path[4] : [123456789a, 654321789a, a987123456, 1789a23456, 65432a9871, 23456a9871, 54326a9871, 1789a62345, ~PNS~, 98761a2345]
[1485937597505] [constructPNS] Path[5] : [123456789a, 543216789a, a987612345, ~PNS~, 98761a2345]
[1485937597505] [constructPNS] Path[6] : [123456789a, a987654321, 56789a4321, 98765a4321, 1234a56789, 5a43216789, 98761234a5, 5a43216789, a543216789, 2345a16789, 5432a16789, 98761a2345]

[123456789a, 213456789a, a987654312, 9a87654312, 21345678a9, 12345678a9, 54321678a9, 9a87612345, ~PNS~, 98761a2345]
[123456789a, 321456789a, a987654123, 89a7654123, 3214567a98, 1234567a98, 5432167a98, 89a7612345, ~PNS~, 98761a2345]
[123456789a, 432156789a, a987651234, 789a651234, 432156a987, 123456a987, 543216a987, 789a612345, ~PNS~, 98761a2345]
[123456789a, 654321789a, a987123456, 1789a23456, 65432a9871, 23456a9871, 54326a9871, 1789a62345, ~PNS~, 98761a2345]
[123456789a, 543216789a, a987612345, ~PNS~, 98761a2345]
[123456789a, a987654321, 56789a4321, 98765a4321, 1234a56789, 5a43216789, 98761234a5, 5a43216789, a543216789, 2345a16789, 5432a16789, 98761a2345]
Disconnected from the target VM, address: '127.0.0.1:50842', transport: 'socket'
